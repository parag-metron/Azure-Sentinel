Parser:
  Title: DNS activity ASIM filtering parser for Corelight Zeek 
  Version: '0.4'
  LastUpdated: Aug 21 2022
Product:
  Name: Corelight Zeek
Normalization:
  Schema: Dns
  Version: '0.1.4'
References:
- Title: ASIM DNS Schema
  Link: https://aka.ms/ASimDnsDoc
- Title: ASIM
  Link: https://aka.ms/AboutASIM
Description: |
  This ASIM parser supports filtering and normalizing Corelight Zeek DNS logs to the ASIM Dns normalized schema.
ParserName: vimDnsCorelightZeek
EquivalentBuiltInParser: _Im_Dns_CorelightZeek
ParserParams:
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: srcipaddr
    Type: string
    Default: '*'
  - Name: domain_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: responsecodename
    Type: string
    Default: '*'
  - Name: response_has_ipv4
    Type: string
    Default: '*'
  - Name: response_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: eventtype
    Type: string
    Default: 'Query'
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  let query_type_lookup=datatable(DnsQueryType:int,DnsQueryTypeName:string)[
    0, "Reserved",
    1, "A",
    2, "NS",
    3, "MD",
    4, "MF",
    5, "CNAME",
    6, "SOA",
    7, "MB",
    8, "MG",
    9, "MR",
    10, "NULL",
    11, "WKS",
    12, "PTR",
    13, "HINFO",
    14, "MINFO",
    15, "MX",
    16, "TXT",
    17, "RP",
    18, "AFSDB",
    19, "X25",
    20, "ISDN",
    21, "RT",
    22, "NSAP",
    23, "NSAP-PTR",
    24, "SIG",
    25, "KEY",
    26, "PX",
    27, "GPOS",
    28, "AAAA",
    29, "LOC",
    30, "NXT",
    31, "EID",
    32, "NIMLOC",
    33, "SRV",
    34, "ATMA",
    35, "NAPTR",
    36, "KX",
    37, "CERT",
    38, "A6",
    39, "DNAME",
    40, "SINK",
    41, "OPT",
    42, "APL",
    43, "DS",
    44, "SSHFP",
    45, "IPSECKEY",
    46, "RRSIG",
    47, "NSEC",
    48, "DNSKEY",
    49, "DHCID",
    50, "NSEC3",
    51, "NSEC3PARAM",
    52, "TLSA",
    53, "SMIMEA",
    54, "Unassigned",
    55, "HIP",
    56, "NINFO",
    57, "RKEY",
    58, "TALINK",
    59, "CDS",
    60, "CDNSKEY",
    61, "OPENPGPKEY",
    62, "CSYNC",
    99, "SPF",
    100, "UINFO",
    101, "UID",
    102, "GID",
    103, "UNSPEC",
    104, "NID",
    105, "L32",
    106, "L64",
    107, "LP",
    108, "EUI48",
    109, "EUI64",
    249, "TKEY",
    250, "TSIG",
    251, "IXFR",
    252, "AXFR",
    253, "MAILB",
    254, "MAILA",
    255, "ANY",
    256, "URI",
    257, "CAA",
    258, "AVC",
    259, "DOA",
    32768, "TA",
    32769, "DLV"];
  let class_lookup = datatable(DnsQueryClass:int, DnsQueryClassName: string)[
      0, 'Reserved',
      1, 'IN',
      2, 'Unassigned',
      3, 'CH',
      4, 'HS',
      254, 'None',
      255, 'Any'];
  let parser=(
    starttime:datetime=datetime(null), endtime:datetime=datetime(null)
    , srcipaddr:string='*'
    , domain_has_any:dynamic=dynamic([]) 
    , responsecodename:string='*', response_has_ipv4:string='*'
    , response_has_any_prefix:dynamic=dynamic([]) , eventtype:string='Query'
    , disabled:bool=false
    ){
    Corelight_CL | where not(disabled)
    //  -- Pre-parsing filtering:
    | where
      (eventtype in~ ('lookup', 'Query'))
      and (isnull(starttime) or TimeGenerated >= starttime)
      and (isnull(endtime) or TimeGenerated <= endtime)
      and (Message has '"_path":"dns"' or Message has '"_path":"dns_red"')
      and (srcipaddr=='*' or has_ipv4(Message, srcipaddr))
      and (array_length(domain_has_any) ==0 or Message has_any (domain_has_any))
      and (responsecodename=='*' or Message has responsecodename)
      and (response_has_ipv4=='*' or has_ipv4(Message,response_has_ipv4) )
      and (array_length(response_has_any_prefix) == 0 or has_any_ipv4_prefix(Message, response_has_any_prefix))
    // --
    | extend data = todynamic(Message)
    // -- Post-filtering accurately now that message is parsed
    | where
         (srcipaddr=="*" or srcipaddr==data.["id.orig_h"])
          and (array_length(domain_has_any) ==0 or data.query has_any (domain_has_any))
          and (responsecodename=="*" or data.rcode_name has responsecodename)
          and (response_has_ipv4=='*' or has_ipv4(data.answers,response_has_ipv4) )
          and (array_length(response_has_any_prefix) == 0 or has_any_ipv4_prefix(data.answers, response_has_any_prefix))
    | extend 
        EventCount=int(1),
        EventProduct="Zeek",
        EventVendor="Corelight",
        EventSchema = "Dns",
        EventSchemaVersion="0.1.4",
        EventType="Query",
        EventSubType=iff(isnull(data.rcode),'request','response'),
        EventEndTime= todatetime(data.ts),
        EventOriginalUid = tostring(data.uid),
        SrcIpAddr = tostring (data.["id.orig_h"]),
        SrcPortNumber = toint (data.["id.orig_p"]),
        DstIpAddr = tostring (data.["id.dest_h"]),
        DstPortNumber = toint (data.["id.dest_p"]),
        NetworkProtocol = tostring(data.proto),
        TransactionIdHex = tohex(toint(data.trans_id)), 
        DnsQuery = tostring(data.query),
        DnsResponseCode = toint(data.rcode),
        EventResultDetails = tostring (data.rcode_name),
        DnsFlagsAuthoritative = tobool(data.AA),
        DnsFlagsTruncated = tobool(data.TC),
        DnsFlagsRecursionDesired = tobool(data.RD),
        DnsFlagsZ = tobool(data.Z),
        //DnsQueryClassName =tostring(data.qclass_name), 
        DnsQueryClass = toint(data.qclass),
        //DnsQueryTypeName =tostring(data.qtype_name), 
        DnsQueryType = toint(data.qtype),
        DnsNetworkDuration = toint(data.rtt),
        DnsResponseName = tostring(pack ('answers', data.answers, 'ttls', data.TTLs, 'authoritative ', data.auth, 'additional', data.addl))
    | lookup query_type_lookup on DnsQueryType
    | lookup class_lookup on DnsQueryClass
    | extend
        EventStartTime = EventEndTime,
        EventResult = iff (EventResultDetails=~'NOERROR','Success','Failure'),
        DnsQueryTypeName = case (DnsQueryTypeName == "" and not(isnull(DnsQueryType)), strcat("TYPE", DnsQueryType), DnsQueryTypeName),
        DnsQueryClassName = case (DnsQueryClassName == "" and not(isnull(DnsQueryClass)), strcat("CLASS", DnsQueryClass), DnsQueryClassName)
    | project-rename 
        Dvc = hostname_s
    // Aliases
    | extend 
        DnsResponseCodeName=EventResultDetails, 
        Domain=DnsQuery,
        IpAddr=SrcIpAddr,
        Src=SrcIpAddr,
        Dst=DstIpAddr,
        Duration=DnsNetworkDuration
    | project-away ['data'], Message, MG, ManagementGroupName, RawData, SourceSystem, Computer
  };
  parser (starttime, endtime, srcipaddr, domain_has_any, responsecodename, response_has_ipv4, response_has_any_prefix, eventtype, disabled)